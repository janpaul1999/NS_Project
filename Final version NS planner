from tkinter import *
import requests
import xmltodict
vertreklocatie = None
aankomstlocatie = None

def api(station):
    """station functie zet gebruiker input bij het "van" veld om naar de stations API en vervolgens naar XML"""
    auth_details = ('janpaulmoolen99@gmail.com', 'BL03juvmVIkzP65x1p8F4iTokVclbRUFv04Icuejr3GW45fGPLsnEA')
    api_url = 'http://webservices.ns.nl/ns-api-avt?station={}'.format(station)
    response = requests.get(api_url, auth=auth_details)
    vertrekXML = xmltodict.parse(response.text)
    return vertrekXML

def geenvertraging(vertrek):
    """returned de output als er geen vertraging is bij de trein"""
    global aankomstlocatie #gewenste aankomstlocatie gebruiken in de beschikbare treinen
    if 'RouteTekst' in vertrek:  # vind tussen stops als die in de API bij de reis erbij staan
        bestemmingen = vertrek['RouteTekst']
        bestemmingen.replace(" ", "")
        for bestemming in bestemmingen.split(','):
            if str(aankomstlocatie.get()).title() in bestemming:
                gebruikers_bestemming = bestemming

    eindbestemming = vertrek['EindBestemming'] #eindbestemming van de trein
    vertrektijd = vertrek['VertrekTijd']  # 2016-09-27T18:36:00+0200
    vertrektijd = vertrektijd[11:16]  # 18:36
    vertrekspoor = vertrek['VertrekSpoor'] #vanaf welk spoor vertrekt de trein
    treintype = vertrek['TreinSoort'] # wat voor type trein is het (denk aan intercity, ICE international etc.)
    if 'RouteTekst' in vertrek:
        if str(aankomstlocatie.get()).title() in bestemmingen: # pakt de aankomst locatie, vervangt de eerste letter met een hoofdletter omdat dit in de API zo gespelled is
            Reistekst["text"] += '{0}'.format('Om {0} vertrekt er een {1} naar {2} vanaf spoor {3}\n'.format(vertrektijd, treintype, gebruikers_bestemming, vertrekspoor[('#text')]))
    if str(aankomstlocatie.get()).title() in eindbestemming:
        Reistekst["text"] += '{0}'.format('Om {0} vertrekt er een {1} naar {2} vanaf spoor {3}\n'.format(vertrektijd, treintype, eindbestemming,vertrekspoor[('#text')]))
    return Reistekst

def vertraging(vertrek):
    """returned de output als er vertraging is bij de trein"""
    global aankomstlocatie
    if 'RouteTekst' in vertrek: # gebruikt om te kijken of de gebruikers aankomst locatie in 1 van de tussenstops van de trein staat
        bestemmingen = vertrek['RouteTekst']
        bestemmingen.replace(" ", "")
        for bestemming in bestemmingen.split(','):
            if str(aankomstlocatie.get()).title() in bestemming:
                gebruikers_bestemming = bestemming

    if 'VertrekVertragingTekst' in vertrek: # om vertraging te vinden als het bij een reis staat vermeld
        vertragings = vertrek['VertrekVertragingTekst']

    eindbestemming = vertrek['EindBestemming'] #eindbestemming van de trein
    vertrektijd = vertrek['VertrekTijd']  # 2016-09-27T18:36:00+0200
    vertrektijd = vertrektijd[11:16]  # 18:36
    vertrekspoor = vertrek['VertrekSpoor'] #vanaf welk spoor vertrekt de trein
    treintype = vertrek['TreinSoort'] # wat voor type trein is het (denk aan intercity, ICE international etc.)
    if 'RouteTekst' in vertrek:
        if str(aankomstlocatie.get()).title() in bestemmingen:
            Reistekst["text"] += '{0}'.format('Om {0} ({1}) vertrekt er een {2} naar {3} vanaf spoor {4}\n'.format(vertrektijd, vertragings,treintype, gebruikers_bestemming,vertrekspoor[('#text')]))
    elif str(aankomstlocatie.get()).title() in eindbestemming:
        Reistekst["text"] += '{0}'.format('Om {0} ({1}) vertrekt er een {2} naar {3} vanaf spoor {4}\n'.format(vertrektijd, vertragings, treintype,eindbestemming,vertrekspoor[('#text')]))


def station():
    """kiest of functie vertragig of geenvertraging wordt aangeroepen en dient als "commando" in de button in de interface"""
    global aankomstlocatie
    global vertreklocatiek
    Reistekst['text'] = ''
    """dit laat alles tikken, deze functie wordt aangeroepen door het klikken op de "plannen" knop in de interface"""

    vertrekXML = api(vertreklocatie.get())
    for vertrek in vertrekXML['ActueleVertrekTijden']['VertrekkendeTrein']: # gebruiken de orderdicts om vertrektijd, eindbestemming, treinsoort etc. op te halen
        vertrekspoor = vertrek['VertrekSpoor']

        """de if en elif zijn er om te kiezen tussen de geenvertraging en vertraging functies"""
        if '#text' in vertrekspoor and 'VertrekVertragingTekst' in vertrek:
            vertraging(vertrek)
        elif '#text' in vertrekspoor:
            geenvertraging(vertrek)


root = Tk() # hier wordt Tkinter opgeroepen en de interface master is root
root.title('NS reisplanner')
root.configure(background='#FFCA1F')

# dit zijn de afbeeldingen die wij gebruiken
nsplanner = PhotoImage(file='images\\nsplanner.png')
buttonphoto = PhotoImage(file='images\\nsplannenknop.png')
vanphoto = PhotoImage(file='images\\van.png')
naarphoto = PhotoImage(file='images\\naar.png')

# dit is 1 van de afbeeldingen die wij gebruiken
nsplannerfoto = Label(root, image=nsplanner, borderwidth=0)
nsplannerfoto.place(x=-250, y=-250, relwidth=1, relheight=1)
nsplannerfoto.lower(belowThis=None)
nsplannerfoto.grid(row=0, column=1)

# deze knop roept de station functie aan
button = Button(root, image=buttonphoto, command=station, fg="white", borderwidth=-2)
button.place(x=1018, y=154)
button.configure(background='#FFCA1F')

# dit zijn de 2 entry's die wij gebruiken voor de vertrek en aankomstlocatie
vertreklocatie = Entry(root, font=('Aldhabi', 14), borderwidth=0)
vertreklocatie.place(x=100, y=105)
vertreklocatie.configure(background='white')

aankomstlocatie = Entry(root, font=('Aldhabi', 14), borderwidth=0)
aankomstlocatie.place(x=685, y=105)
aankomstlocatie.configure(background='white')


def windowsize():
    """returned height en width naar geometry voor de window dimensies"""
    width = 1170
    height = 550
    x = (root.winfo_screenwidth() // 2) - (width // 2)
    y = (root.winfo_screenheight() // 2) - (height // 2)
    return root.geometry("{}x{}+{}+{}".format(width, height, x, y))

heighttekst = [0]
Reistekst = ""

for reis in Reistekst: # deze for-loop scaled de output met hoeveel regels die moet laten zien
    heighttekst += 1

Reistekst = Label(root, text='', font=('frutiger', 13,), height=heighttekst, justify=LEFT)
Reistekst.place(x=-270, y=227, width=1170)
Reistekst.configure(background='#FFCA1F', height=heighttekst)

windowsize()

root.mainloop() # voert de interface out als een loop
